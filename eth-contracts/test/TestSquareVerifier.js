// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');

contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];

    const owner = account_one;

    // Copy of proof.json for ease
    const CORRECT_PROOF = {
        "scheme": "g16",
        "curve": "bn128",
        "proof": {
        "a": [
            "0x0b0510e9dff90c01a42849650e1651646ea2a268c54452e52768b7c7de4c4b3b",
            "0x2a9f8c1631666fa421f69c537ed658555aec7f2050de3344c42cefed755895cd"
        ],
        "b": [
            [
            "0x098cdfe2f8c0e8b4e915505d57240481b701fc1eb37d2b55bcf30c1d6e0b39ce",
            "0x28dbd97e00e8d5e1fdd048741283bdc02198e6ae3ebeb17c63fefef002efc8a5"
            ],
            [
            "0x1becf3a125e88b658b76951e8b8da3af6be4f6af86ed14d621475441a25094f5",
            "0x0c5b0df0147ed915c90c4824eb904e0b8595270025e8d70e5638510ed75fee84"
            ]
        ],
        "c": [
            "0x2c219a4f2ede339bf6660b650d387bce086f703cc405a90752a9c935877bf940",
            "0x2dd2afac87a8cf42aa2c79bd01040eccd5e2e6e92be94dcad493bcec049cc859"
        ]
        },
        "inputs": [
        "0x0000000000000000000000000000000000000000000000000000000000000009",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        ]
    };

    // incorrect proof from a "cube" verification function instead of "square"
    const INCORRECT_PROOF = {
        "scheme": "g16",
        "curve": "bn128",
        "proof": {
          "a": [
            "0x1c6502903eff4abc9d1833970a1651d402acb482ba558019119e83e3a8a9f78a",
            "0x0f65bada069f92e44623defd8cde6d8599bae957f4ea6eb4cfa8e50cf7c3c100"
          ],
          "b": [
            [
              "0x01520515d84a9efe07e76d31150ed5f258326725365d8962290b2d02067732ae",
              "0x0149fbbf9f77d1902f14b76c09dfadbce06f5e1dd3973a833ea914601f3a0217"
            ],
            [
              "0x07322b6603391346f9503d6622718578303d416e03028bef686aca717f16fe48",
              "0x175f9b9405702aadb8e25bf29d47198b7d70e0c2f085baae2960231c924fcf46"
            ]
          ],
          "c": [
            "0x2258b6cbd6999eb7d38fc8e8712ab7f28814060e08b231e1db7eb0bae0da8be6",
            "0x0fc4d1532e24edca6dead2cb6334d8ff80cb59834dddc532426ccb8aa904bd6a"
          ]
        },
        "inputs": [
          "0x000000000000000000000000000000000000000000000000000000000000001b",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ]
      }


    describe('SquareVerifier', function () {
        beforeEach(async function () { 
            this.contract = await SquareVerifier.new({from: owner});
        })
        
        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('should verify with correct proof', async function () { 
            let res = await this.contract.verifyTx(CORRECT_PROOF.proof, CORRECT_PROOF.inputs);
            assert.equal(res, true, "Verification failed");
        })
        
        // Test verification with incorrect proof
        it('should FAIL verify with incorrect proof', async function () {
            let res = await this.contract.verifyTx(INCORRECT_PROOF.proof, INCORRECT_PROOF.inputs);
            assert.equal(res, false, "Verification passed erroneously");
        })
    })
})
